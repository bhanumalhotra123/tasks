Sample log file:

192.168.1.101 - - [01/Oct/2023:10:15:30 +0000] "GET /page1 HTTP/1.1" 200 1234
10.0.0.42 - - [01/Oct/2023:10:17:45 +0000] "GET /page2 HTTP/1.1" 404 567
192.168.1.101 - - [01/Oct/2023:10:19:12 +0000] "GET /page3 HTTP/1.1" 200 890
172.16.0.55 - - [01/Oct/2023:10:21:05 +0000] "GET /page4 HTTP/1.1" 200 432


grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile  

-E option for extended regular expressions and the -o option to only print the matched part of the line. 
grep matches a particular pattern and gives us the whole line, we don't need the whole line, we just need the pattern.

  LENOVO@PC-f7ad11 MINGW64 ~
$ vi logfile

LENOVO@PC-f7ad11 MINGW64 ~
$ chmod +x logfile

LENOVO@PC-f7ad11 MINGW64 ~
$ grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" logfile
192.168.1.101
10.0.0.42
192.168.1.101
172.16.0.55





[0-9] this will try to match any number from 0 to 9
{1,3} means it can have 1 12 or 123 like values
[\.] we are using \ to remove the logic of using . as a special character here
 {3} this means the pattern will be searchde 3 times



$ grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile | sort
10.0.0.42
172.16.0.55
192.168.1.101
192.168.1.101



But this logfile do have duplicates

$ grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile | sort | uniq
10.0.0.42
172.16.0.55
192.168.1.101

to have the count 

LENOVO@PC-f7ad11 MINGW64 ~
$ grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile | sort | uniq -c
      1 10.0.0.42
      1 172.16.0.55
      2 192.168.1.101

$ grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile | sort | uniq -c | sort -n
      1 10.0.0.42
      1 172.16.0.55
      2 192.168.1.101


to get the max no. of times mentioned ip at top:

LENOVO@PC-f7ad11 MINGW64 ~
$ grep -E -o "([0-9]{1,3}[.\]){3}[0-9]{1,3}" logfile | sort | uniq -c | sort -nr
      2 192.168.1.101
      1 172.16.0.55
      1 10.0.0.42







Literal Characters: Most characters in a regular expression match themselves literally. For example, the regex abc matches the string "abc" in the text.

Metacharacters: Regular expressions often contain metacharacters that have special meanings. Some common metacharacters include:

. (dot): Matches any single character except a newline.
*: Matches zero or more occurrences of the preceding character or group.
+: Matches one or more occurrences of the preceding character or group.
?: Matches zero or one occurrence of the preceding character or group.
| (pipe): Acts like a logical OR, allowing you to match one of several patterns.
^: Matches the start of a line or string.
$: Matches the end of a line or string.
Character Classes: Square brackets [] define a character class. For example, [aeiou] matches any vowel. You can also use ranges like [0-9] to match any digit.

Quantifiers: Quantifiers specify how many times a character or group should occur:

{n}: Matches exactly n occurrences.
{n,}: Matches at least n occurrences.
{n,m}: Matches between n and m occurrences.
Grouping: Parentheses () are used to create groups. They allow you to apply quantifiers and other operations to a group of characters. For example, (ab)+ matches one or more occurrences of "ab."

Escaping: To match metacharacters as literals, you can escape them with a backslash \. For example, \* matches the asterisk character * literally.

Anchors: ^ and $ are used as anchors to specify the start and end of a line or string, respectively.

Modifiers: Some regex engines support modifiers that affect how the regex is interpreted. Common modifiers include i for case-insensitive matching and g for global matching (matches all occurrences).

Character Shorthands: Regex often provides shorthand notations for common character classes:

\d: Matches any digit (equivalent to [0-9]).
\w: Matches any word character (letters, digits, and underscores).
\s: Matches any whitespace character (spaces, tabs, newlines, etc.).
Non-Greedy Matching: By default, quantifiers are greedy, meaning they match as much as possible. You can make them non-greedy by adding ? after them. For example, .*? matches the shortest possible string.

Lookarounds: Lookaheads and lookbehinds are used for lookahead and lookbehind assertions, allowing you to specify conditions that must be met before or after the main pattern.
